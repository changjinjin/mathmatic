设计模式学习笔记：代理模式（Proxy）
地址： https://blog.csdn.net/sinat_27245917/article/details/107065447
文章目录
    一、代理模式介绍
    二、Java 中代理的三种方式
        1、静态代理
        2、JDK 动态代理
        3、CGLIB 动态代理

一、代理模式介绍
代理模式是设计模式中结构型模式的一种。当访问一个对象的时候因为一些原因不去访问这个对象，而是通过一个代理对象去访问这个对象，这个模式就是代理模式。
例如：购买火车票不去车站买，而是去代售点买票。

二、Java 中代理的三种方式
1、静态代理
静态代理的使用需要被代理的对象和代理对象拥有相同的方法，因此实现同一个接口是最好的做法。
下面演示通过代理对象打印被代理对象方法的入参和出参信息：
静态代理的缺点很明显，就是如果被代理对象改变了，那么代理对象就要跟着改变。如果有很多需要被代理的对象，就要写很多代理类，非常不方便。

2、JDK 动态代理
JDK动态代理的特点：
代理类是利用JDK的API动态生成的。
不需要与被代理类实现同样的接口。
同样使用打印日志的例子演示动态代理的使用：
JDK实现动态代理需要被代理对象实现接口。

3、CGLIB 动态代理
CGLIB 代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能的扩展。其底层是使用一个字节码框架ASM来转换字节码并生成新的类。
CGLIB 实现需要引入 CGLIB 的 jar 包，Spring 的核心包中已经包括了 CGLIB 的功能。
下面还是使用日志代理的例子演示 CGLIB 的代理实现：
CGLIB 原理是创建对象的子类来实现代理。
因此被代理的类不能是 final 修饰的，如果使用 final 修饰类在运行时会报错。
被 final 或 static 修饰的方法也不能被代理，虽然不会报错，但是代理增强的功能会失效。
